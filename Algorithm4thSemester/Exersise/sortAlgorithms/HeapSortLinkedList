#include <iostream>
#include <cstdlib>

#define SIZE 7

using namespace std;

// Node structure to describe basic node structure
struct LinkedListNode {
    int data;
    LinkedListNode* next;

    LinkedListNode(int data, LinkedListNode* node) {
        this->data = data;
        this->next = node;
    }
};

// Comparator function to sort nodes by their data value
int compare(LinkedListNode* node1, LinkedListNode* node2) {
    if (node1->data < node2->data) {
        return -1;
    } else if (node1->data > node2->data) {
        return 1;
    }
    return 0;
}

// Function to heapify
void heapify(LinkedListNode** arr, int n, int i) {
    int largest = i;
    int right = 2 * i + 2;
    int left = 2 * i + 1;

    // Check if left child is larger than root
    if (left < n && compare(arr[left], arr[largest]) > 0) {
        largest = left;
    }

    // Check if right child is larger than the largest till now
    if (right < n && compare(arr[right], arr[largest]) > 0) {
        largest = right;
    }

    // Swap if largest is not root
    if (largest != i) {
        int temp = arr[i]->data;
        arr[i]->data = arr[largest]->data;
        arr[largest]->data = temp;

        // Recursively heapify the subTree
        heapify(arr, n, largest);
    }
}

// Function to sort the array
void sortArray(LinkedListNode** arr, int n) {

    // Build heap
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Moving current root to end
    for (int i = n - 1; i > 0; i--) {
        int temp = arr[0]->data;
        arr[0]->data = arr[i]->data;
        arr[i]->data = temp;

        heapify(arr, i, 0);
    }
}

// Function to utilize the heapsort
LinkedListNode* heapsort(LinkedListNode* node) {
    LinkedListNode* head = node;
    int i = 0;

    // Array to copy the linked list data
    LinkedListNode** arr = new LinkedListNode*[SIZE];
    while (head != nullptr) {
        arr[i] = head;
        i++;
        head = head->next;
    }
    sortArray(arr, SIZE);
    return *arr;
}

void printList(LinkedListNode* node) {
    while (node != nullptr) {
        cout << node->data << " ";
        node = node->next;
    }
}

// Driver code
int main() {
    srand(time(nullptr));
    LinkedListNode* head = new LinkedListNode(SIZE, nullptr);
    LinkedListNode* node = head;
    for (int i = SIZE - 1; i > 0; i--) {
        node->next = new LinkedListNode(rand() % 20, nullptr);
        node = node->next;
    }
    cout << "LinkedList before sorting: ";
    node = head;
    printList(node);
    cout << "\nLinkedList after sorting: ";
    printList(heapsort(node));

    return 0;
}
